-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.12 from ParLang.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pExp -> Exp                                 (0)
	%start_pExp1 -> Exp1                               (1)
	%start_pExp2 -> Exp2                               (2)
	%start_pDef -> Def                                 (3)
	%start_pListDef -> ListDef                         (4)
	Integer -> L_integ                                 (5)
	Ident -> L_ident                                   (6)
	Exp -> Exp '+' Exp1                                (7)
	Exp -> Exp '-' Exp1                                (8)
	Exp -> Exp1                                        (9)
	Exp1 -> Exp1 '*' Exp2                              (10)
	Exp1 -> Exp1 '/' Exp2                              (11)
	Exp1 -> Exp2                                       (12)
	Exp2 -> Integer                                    (13)
	Exp2 -> Ident                                      (14)
	Exp2 -> '(' Exp ')'                                (15)
	Def -> Ident '=' Exp                               (16)
	ListDef ->                                         (17)
	ListDef -> Def                                     (18)
	ListDef -> Def ',' ListDef                         (19)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'('            { PT _ (TS _ 1) }
	')'            { PT _ (TS _ 2) }
	'*'            { PT _ (TS _ 3) }
	'+'            { PT _ (TS _ 4) }
	','            { PT _ (TS _ 5) }
	'-'            { PT _ (TS _ 6) }
	'/'            { PT _ (TS _ 7) }
	'='            { PT _ (TS _ 8) }
	L_integ        { PT _ (TI $$) }
	L_ident        { PT _ (TV $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pExp     rule  0
	%start_pExp1    rule  1
	%start_pExp2    rule  2
	%start_pDef     rule  3
	%start_pListDef rule  4
	Integer         rule  5
	Ident           rule  6
	Exp             rules 7, 8, 9
	Exp1            rules 10, 11, 12
	Exp2            rules 13, 14, 15
	Def             rule  16
	ListDef         rules 17, 18, 19

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	'('            shift, and enter state 15
	L_integ        shift, and enter state 6
	L_ident        shift, and enter state 10

	Integer        goto state 12
	Ident          goto state 13
	Exp            goto state 18
	Exp1           goto state 19
	Exp2           goto state 17

State 1


	'('            shift, and enter state 15
	L_integ        shift, and enter state 6
	L_ident        shift, and enter state 10

	Integer        goto state 12
	Ident          goto state 13
	Exp1           goto state 16
	Exp2           goto state 17

State 2


	'('            shift, and enter state 15
	L_integ        shift, and enter state 6
	L_ident        shift, and enter state 10

	Integer        goto state 12
	Ident          goto state 13
	Exp2           goto state 14

State 3


	L_ident        shift, and enter state 10

	Ident          goto state 7
	Def            goto state 11

State 4


	L_ident        shift, and enter state 10
	%eof           reduce using rule 17

	Ident          goto state 7
	Def            goto state 8
	ListDef        goto state 9

State 5


	L_integ        shift, and enter state 6


State 6

	Integer -> L_integ .                                (rule 5)

	')'            reduce using rule 5
	'*'            reduce using rule 5
	'+'            reduce using rule 5
	','            reduce using rule 5
	'-'            reduce using rule 5
	'/'            reduce using rule 5
	%eof           reduce using rule 5


State 7

	Def -> Ident . '=' Exp                              (rule 16)

	'='            shift, and enter state 26


State 8

	ListDef -> Def .                                    (rule 18)
	ListDef -> Def . ',' ListDef                        (rule 19)

	','            shift, and enter state 25
	%eof           reduce using rule 18


State 9

	%start_pListDef -> ListDef .                        (rule 4)

	%eof           accept


State 10

	Ident -> L_ident .                                  (rule 6)

	')'            reduce using rule 6
	'*'            reduce using rule 6
	'+'            reduce using rule 6
	','            reduce using rule 6
	'-'            reduce using rule 6
	'/'            reduce using rule 6
	'='            reduce using rule 6
	%eof           reduce using rule 6


State 11

	%start_pDef -> Def .                                (rule 3)

	%eof           accept


State 12

	Exp2 -> Integer .                                   (rule 13)

	')'            reduce using rule 13
	'*'            reduce using rule 13
	'+'            reduce using rule 13
	','            reduce using rule 13
	'-'            reduce using rule 13
	'/'            reduce using rule 13
	%eof           reduce using rule 13


State 13

	Exp2 -> Ident .                                     (rule 14)

	')'            reduce using rule 14
	'*'            reduce using rule 14
	'+'            reduce using rule 14
	','            reduce using rule 14
	'-'            reduce using rule 14
	'/'            reduce using rule 14
	%eof           reduce using rule 14


State 14

	%start_pExp2 -> Exp2 .                              (rule 2)

	%eof           accept


State 15

	Exp2 -> '(' . Exp ')'                               (rule 15)

	'('            shift, and enter state 15
	L_integ        shift, and enter state 6
	L_ident        shift, and enter state 10

	Integer        goto state 12
	Ident          goto state 13
	Exp            goto state 24
	Exp1           goto state 19
	Exp2           goto state 17

State 16

	%start_pExp1 -> Exp1 .                              (rule 1)
	Exp1 -> Exp1 . '*' Exp2                             (rule 10)
	Exp1 -> Exp1 . '/' Exp2                             (rule 11)

	'*'            shift, and enter state 20
	'/'            shift, and enter state 21
	%eof           accept


State 17

	Exp1 -> Exp2 .                                      (rule 12)

	')'            reduce using rule 12
	'*'            reduce using rule 12
	'+'            reduce using rule 12
	','            reduce using rule 12
	'-'            reduce using rule 12
	'/'            reduce using rule 12
	%eof           reduce using rule 12


State 18

	%start_pExp -> Exp .                                (rule 0)
	Exp -> Exp . '+' Exp1                               (rule 7)
	Exp -> Exp . '-' Exp1                               (rule 8)

	'+'            shift, and enter state 22
	'-'            shift, and enter state 23
	%eof           accept


State 19

	Exp -> Exp1 .                                       (rule 9)
	Exp1 -> Exp1 . '*' Exp2                             (rule 10)
	Exp1 -> Exp1 . '/' Exp2                             (rule 11)

	')'            reduce using rule 9
	'*'            shift, and enter state 20
	'+'            reduce using rule 9
	','            reduce using rule 9
	'-'            reduce using rule 9
	'/'            shift, and enter state 21
	%eof           reduce using rule 9


State 20

	Exp1 -> Exp1 '*' . Exp2                             (rule 10)

	'('            shift, and enter state 15
	L_integ        shift, and enter state 6
	L_ident        shift, and enter state 10

	Integer        goto state 12
	Ident          goto state 13
	Exp2           goto state 33

State 21

	Exp1 -> Exp1 '/' . Exp2                             (rule 11)

	'('            shift, and enter state 15
	L_integ        shift, and enter state 6
	L_ident        shift, and enter state 10

	Integer        goto state 12
	Ident          goto state 13
	Exp2           goto state 32

State 22

	Exp -> Exp '+' . Exp1                               (rule 7)

	'('            shift, and enter state 15
	L_integ        shift, and enter state 6
	L_ident        shift, and enter state 10

	Integer        goto state 12
	Ident          goto state 13
	Exp1           goto state 31
	Exp2           goto state 17

State 23

	Exp -> Exp '-' . Exp1                               (rule 8)

	'('            shift, and enter state 15
	L_integ        shift, and enter state 6
	L_ident        shift, and enter state 10

	Integer        goto state 12
	Ident          goto state 13
	Exp1           goto state 30
	Exp2           goto state 17

State 24

	Exp -> Exp . '+' Exp1                               (rule 7)
	Exp -> Exp . '-' Exp1                               (rule 8)
	Exp2 -> '(' Exp . ')'                               (rule 15)

	')'            shift, and enter state 29
	'+'            shift, and enter state 22
	'-'            shift, and enter state 23


State 25

	ListDef -> Def ',' . ListDef                        (rule 19)

	L_ident        shift, and enter state 10
	%eof           reduce using rule 17

	Ident          goto state 7
	Def            goto state 8
	ListDef        goto state 28

State 26

	Def -> Ident '=' . Exp                              (rule 16)

	'('            shift, and enter state 15
	L_integ        shift, and enter state 6
	L_ident        shift, and enter state 10

	Integer        goto state 12
	Ident          goto state 13
	Exp            goto state 27
	Exp1           goto state 19
	Exp2           goto state 17

State 27

	Exp -> Exp . '+' Exp1                               (rule 7)
	Exp -> Exp . '-' Exp1                               (rule 8)
	Def -> Ident '=' Exp .                              (rule 16)

	'+'            shift, and enter state 22
	','            reduce using rule 16
	'-'            shift, and enter state 23
	%eof           reduce using rule 16


State 28

	ListDef -> Def ',' ListDef .                        (rule 19)

	%eof           reduce using rule 19


State 29

	Exp2 -> '(' Exp ')' .                               (rule 15)

	')'            reduce using rule 15
	'*'            reduce using rule 15
	'+'            reduce using rule 15
	','            reduce using rule 15
	'-'            reduce using rule 15
	'/'            reduce using rule 15
	%eof           reduce using rule 15


State 30

	Exp -> Exp '-' Exp1 .                               (rule 8)
	Exp1 -> Exp1 . '*' Exp2                             (rule 10)
	Exp1 -> Exp1 . '/' Exp2                             (rule 11)

	')'            reduce using rule 8
	'*'            shift, and enter state 20
	'+'            reduce using rule 8
	','            reduce using rule 8
	'-'            reduce using rule 8
	'/'            shift, and enter state 21
	%eof           reduce using rule 8


State 31

	Exp -> Exp '+' Exp1 .                               (rule 7)
	Exp1 -> Exp1 . '*' Exp2                             (rule 10)
	Exp1 -> Exp1 . '/' Exp2                             (rule 11)

	')'            reduce using rule 7
	'*'            shift, and enter state 20
	'+'            reduce using rule 7
	','            reduce using rule 7
	'-'            reduce using rule 7
	'/'            shift, and enter state 21
	%eof           reduce using rule 7


State 32

	Exp1 -> Exp1 '/' Exp2 .                             (rule 11)

	')'            reduce using rule 11
	'*'            reduce using rule 11
	'+'            reduce using rule 11
	','            reduce using rule 11
	'-'            reduce using rule 11
	'/'            reduce using rule 11
	%eof           reduce using rule 11


State 33

	Exp1 -> Exp1 '*' Exp2 .                             (rule 10)

	')'            reduce using rule 10
	'*'            reduce using rule 10
	'+'            reduce using rule 10
	','            reduce using rule 10
	'-'            reduce using rule 10
	'/'            reduce using rule 10
	%eof           reduce using rule 10


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 20
Number of terminals: 10
Number of non-terminals: 12
Number of states: 34
