-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

module AbsLang where

newtype Ident = Ident String
  deriving (Eq, Ord, Show, Read)

data Exp
    = EAdd Exp Exp
    | ESub Exp Exp
    | EMul Exp Exp
    | EDiv Exp Exp
    | EInt Integer
    | EVar Ident
  deriving (Eq, Ord, Read)

data Def = Def Ident Exp
  deriving (Eq, Ord, Show, Read)

instance Show Exp where
  show = showExp

showExp :: Exp -> String
showExp e = case e of
  EAdd e1 e2     -> "(" ++ showExp e1 ++ " + " ++ showExp e2 ++ ")"
  ESub e1 e2     -> "(" ++ showExp e1 ++ " - " ++ showExp e2 ++ ")"
  EMul e1 e2     -> "(" ++ showExp e1 ++ " * " ++ showExp e2 ++ ")"
  EDiv e1 e2     -> "(" ++ showExp e1 ++ " / " ++ showExp e2 ++ ")"
  EInt n         -> show n
  EVar (Ident s) -> s

